%!PS-Adobe-2.0
%%Title: percolation_threshold.eps
%%Creator: gnuplot 4.1 patchlevel 0
%%CreationDate: Fri Jul 22 18:44:56 2005
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 554 770
%%Orientation: Landscape
%%Pages: (atend)
%%EndComments
/gnudict 256 dict def
gnudict begin
%
% The following 6 true/false flags may be edited by hand if required
% The unit line width may also be changed
%
/Color true def
/Blacktext false def
/Solid false def
/Dashlength 1 def
/Landscape true def
/Level1 false def
/Rounded false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
%
/vshift -53 def
/dl1 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul sub dup 0 le { pop 0.01 } if } if
} def
/dl2 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul add } if
} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
Level1 {} {
/SDict 10 dict def
systemdict /pdfmark known not {
  userdict /pdfmark systemdict /cleartomark get put
} if
SDict begin [
  /Title (percolation_threshold.eps)
  /Subject (gnuplot plot)
  /Creator (gnuplot 4.1 patchlevel 0)
  /Author (,,,)
%  /Producer (gnuplot)
%  /Keywords ()
  /CreationDate (Fri Jul 22 18:44:56 2005)
  /DOCINFO pdfmark
end
} ifelse
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
% Default Line colors
/LCw { 1 1 1 } def
/LCb { 0 0 0 } def
/LCa { 0 0 0 } def
/LC0 { 1 0 0 } def
/LC1 { 0 1 0 } def
/LC2 { 0 0 1 } def
/LC3 { 1 0 1 } def
/LC4 { 0 1 1 } def
/LC5 { 1 1 0 } def
/LC6 { 0 0 0 } def
/LC7 { 1 0.3 0 } def
/LC8 { 0.5 0.5 0.5 } def
% Default Line Types
/LTw { PL [] 1 setgray } def
/LTb { BL [] LCb DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash LCa setrgbcolor } def
/LT0 { PL [] LC0 DL } def
/LT1 { PL [4 dl1 2 dl2] LC1 DL } def
/LT2 { PL [2 dl1 3 dl2] LC2 DL } def
/LT3 { PL [1 dl1 1.5 dl2] LC3 DL } def
/LT4 { PL [6 dl1 2 dl2 1 dl1 2 dl2] LC4 DL } def
/LT5 { PL [3 dl1 3 dl2 1 dl1 3 dl2] LC5 DL } def
/LT6 { PL [2 dl1 2 dl2 2 dl1 6 dl2] LC6 DL } def
/LT7 { PL [1 dl1 2 dl2 6 dl1 2 dl2 1 dl1 2 dl2] LC7 DL } def
/LT8 { PL [2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 4 dl2] LC8 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/Density {
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor } def
/BoxColFill { gsave Rec PolyFill } def
/PolyFill {gsave Density  fill grestore grestore} def
/h {rlineto rlineto rlineto gsave fill grestore} bind def
%
% PostScript Level 1 Pattern Fill routine for rectangles
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
%
% PostScript level 2 pattern fill definitions
% Ethan A Merritt April 2004
%
/Level2PatternFill {
/Tile8x8 {/PaintType 2 /PatternType 1 /TilingType 1 /BBox [0 0 8 8] /XStep 8 /YStep 8}
          bind def
/KeepColor {currentrgbcolor [/Pattern /DeviceRGB] setcolorspace} bind def
<< Tile8x8
 /PaintProc { 0.5 setlinewidth  pop 0 0 M 8 8 L 0 8 M 8 0 L stroke } 
>> matrix makepattern
/Pat1 exch def
<< Tile8x8
 /PaintProc { 0.5 setlinewidth  pop 0 0 M 8 8 L 0 8 M 8 0 L stroke
              0 4 M 4 8 L 8 4 L 4 0 L 0 4 L stroke }
>> matrix makepattern
/Pat2 exch def
<< Tile8x8
 /PaintProc { 0.5 setlinewidth  pop 0 0 M 0 8 L
              8 8 L 8 0 L 0 0 L fill }
>> matrix makepattern
/Pat3 exch def
<< Tile8x8
 /PaintProc { 0.5 setlinewidth  pop -4 8 M 8 -4 L
              0 12 M 12 0 L stroke }
>> matrix makepattern
/Pat4 exch def
<< Tile8x8
 /PaintProc { 0.5 setlinewidth  pop -4 0 M 8 12 L
              0 -4 M 12 8 L stroke }
>> matrix makepattern
/Pat5 exch def
<< Tile8x8
 /PaintProc { 0.5 setlinewidth  pop -2 8 M 4 -4 L
              0 12 M 8 -4 L 4 12 M 10 0 L stroke }
>> matrix makepattern
/Pat6 exch def
<< Tile8x8
 /PaintProc { 0.5 setlinewidth  pop -2 0 M 4 12 L
              0 -4 M 8 12 L 4 -4 M 10 8 L stroke }
>> matrix makepattern
/Pat7 exch def
<< Tile8x8
 /PaintProc { 0.5 setlinewidth  pop 8 -2 M -4 4 L
              12 0 M -4 8 L 12 4 M 0 10 L stroke }
>> matrix makepattern
/Pat8 exch def
<< Tile8x8
 /PaintProc { 0.5 setlinewidth  pop 0 -2 M 12 4 L
              -4 0 M 12 8 L -4 4 M 8 10 L stroke }
>> matrix makepattern
/Pat9 exch def
/Pattern1 {KeepColor Pat1 setpattern} bind def
/Pattern2 {KeepColor Pat2 setpattern} bind def
/Pattern3 {KeepColor Pat3 setpattern} bind def
/Pattern4 {KeepColor Landscape { Pat5 } { Pat4 } ifelse setpattern} bind def
/Pattern5 {KeepColor Landscape { Pat4 } { Pat5 } ifelse setpattern} bind def
/Pattern6 {KeepColor Landscape { Pat9 } { Pat6 } ifelse setpattern} bind def
/Pattern7 {KeepColor Landscape { Pat8 } { Pat7 } ifelse setpattern} bind def
} def
%
%
%End of PostScript Level 2 code
%
%
% Substitute for Level 2 pattern fill codes with
% grayscale if Level 2 support is not selected.
%
/Level1PatternFill {
/Pattern1 {0.250 Density} bind def
/Pattern2 {0.500 Density} bind def
/Pattern3 {0.750 Density} bind def
/Pattern4 {0.125 Density} bind def
/Pattern5 {0.375 Density} bind def
/Pattern6 {0.625 Density} bind def
/Pattern7 {0.875 Density} bind def
} def
%
% Now test for support of Level 2 code
%
Level1 {Level1PatternFill} {Level2PatternFill} ifelse
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {show} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} bind def
/MFwidth {0 exch {dup 3 get{dup dup 0 get findfont exch 1 get scalefont
     setfont 6 get stringwidth pop add} {pop} ifelse} forall} bind def
/MLshow { currentpoint stroke M
  0 exch R MFshow } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R MFshow } def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R MFshow } def
/XYsave    { [( ) 1 2 true false 3 ()] } bind def
/XYrestore { [( ) 1 2 true false 4 ()] } bind def
end
%%EndProlog
%%Page: 1 1
gnudict begin
gsave
50 50 translate
0.100 0.100 scale
90 rotate
0 -5040 translate
0 setgray
newpath
(Helvetica) findfont 160 scalefont setfont
1.000 UL
LTb
816 480 M
63 0 V
6049 0 R
-63 0 V
stroke
720 480 M
Blacktext { gsave 0 setgray } if
[ [(Helvetica) 160.0 0.0 true true 0 ( 0)]
] -53.3 MRshow
Blacktext { grestore } if
1.000 UL
LTb
816 917 M
63 0 V
6049 0 R
-63 0 V
stroke
720 917 M
Blacktext { gsave 0 setgray } if
[ [(Helvetica) 160.0 0.0 true true 0 ( 0.1)]
] -53.3 MRshow
Blacktext { grestore } if
1.000 UL
LTb
816 1354 M
63 0 V
6049 0 R
-63 0 V
stroke
720 1354 M
Blacktext { gsave 0 setgray } if
[ [(Helvetica) 160.0 0.0 true true 0 ( 0.2)]
] -53.3 MRshow
Blacktext { grestore } if
1.000 UL
LTb
816 1790 M
63 0 V
6049 0 R
-63 0 V
stroke
720 1790 M
Blacktext { gsave 0 setgray } if
[ [(Helvetica) 160.0 0.0 true true 0 ( 0.3)]
] -53.3 MRshow
Blacktext { grestore } if
1.000 UL
LTb
816 2227 M
63 0 V
6049 0 R
-63 0 V
stroke
720 2227 M
Blacktext { gsave 0 setgray } if
[ [(Helvetica) 160.0 0.0 true true 0 ( 0.4)]
] -53.3 MRshow
Blacktext { grestore } if
1.000 UL
LTb
816 2664 M
63 0 V
6049 0 R
-63 0 V
stroke
720 2664 M
Blacktext { gsave 0 setgray } if
[ [(Helvetica) 160.0 0.0 true true 0 ( 0.5)]
] -53.3 MRshow
Blacktext { grestore } if
1.000 UL
LTb
816 3101 M
63 0 V
6049 0 R
-63 0 V
stroke
720 3101 M
Blacktext { gsave 0 setgray } if
[ [(Helvetica) 160.0 0.0 true true 0 ( 0.6)]
] -53.3 MRshow
Blacktext { grestore } if
1.000 UL
LTb
816 3538 M
63 0 V
6049 0 R
-63 0 V
stroke
720 3538 M
Blacktext { gsave 0 setgray } if
[ [(Helvetica) 160.0 0.0 true true 0 ( 0.7)]
] -53.3 MRshow
Blacktext { grestore } if
1.000 UL
LTb
816 3974 M
63 0 V
6049 0 R
-63 0 V
stroke
720 3974 M
Blacktext { gsave 0 setgray } if
[ [(Helvetica) 160.0 0.0 true true 0 ( 0.8)]
] -53.3 MRshow
Blacktext { grestore } if
1.000 UL
LTb
816 4411 M
63 0 V
6049 0 R
-63 0 V
stroke
720 4411 M
Blacktext { gsave 0 setgray } if
[ [(Helvetica) 160.0 0.0 true true 0 ( 0.9)]
] -53.3 MRshow
Blacktext { grestore } if
1.000 UL
LTb
816 4848 M
63 0 V
6049 0 R
-63 0 V
stroke
720 4848 M
Blacktext { gsave 0 setgray } if
[ [(Helvetica) 160.0 0.0 true true 0 ( 1)]
] -53.3 MRshow
Blacktext { grestore } if
1.000 UL
LTb
816 480 M
0 63 V
0 4305 R
0 -63 V
stroke
816 320 M
Blacktext { gsave 0 setgray } if
[ [(Helvetica) 160.0 0.0 true true 0 ( 0)]
] -53.3 MCshow
Blacktext { grestore } if
1.000 UL
LTb
1835 480 M
0 63 V
0 4305 R
0 -63 V
stroke
1835 320 M
Blacktext { gsave 0 setgray } if
[ [(Helvetica) 160.0 0.0 true true 0 ( 0.1)]
] -53.3 MCshow
Blacktext { grestore } if
1.000 UL
LTb
2853 480 M
0 63 V
0 4305 R
0 -63 V
stroke
2853 320 M
Blacktext { gsave 0 setgray } if
[ [(Helvetica) 160.0 0.0 true true 0 ( 0.2)]
] -53.3 MCshow
Blacktext { grestore } if
1.000 UL
LTb
3872 480 M
0 63 V
0 4305 R
0 -63 V
stroke
3872 320 M
Blacktext { gsave 0 setgray } if
[ [(Helvetica) 160.0 0.0 true true 0 ( 0.3)]
] -53.3 MCshow
Blacktext { grestore } if
1.000 UL
LTb
4891 480 M
0 63 V
0 4305 R
0 -63 V
stroke
4891 320 M
Blacktext { gsave 0 setgray } if
[ [(Helvetica) 160.0 0.0 true true 0 ( 0.4)]
] -53.3 MCshow
Blacktext { grestore } if
1.000 UL
LTb
5909 480 M
0 63 V
0 4305 R
0 -63 V
stroke
5909 320 M
Blacktext { gsave 0 setgray } if
[ [(Helvetica) 160.0 0.0 true true 0 ( 0.5)]
] -53.3 MCshow
Blacktext { grestore } if
1.000 UL
LTb
6928 480 M
0 63 V
0 4305 R
0 -63 V
stroke
6928 320 M
Blacktext { gsave 0 setgray } if
[ [(Helvetica) 160.0 0.0 true true 0 ( 0.6)]
] -53.3 MCshow
Blacktext { grestore } if
1.000 UL
LTb
1.000 UL
LTb
816 480 M
6112 0 V
0 4368 V
-6112 0 V
816 480 L
stroke
LTb
160 2664 M
Blacktext { gsave 0 setgray } if
currentpoint gsave translate 90 rotate 0 0 moveto
[ [(Helvetica) 160.0 0.0 true true 0 (Fraction of Snake Material Percolatin to Electrode)]
] -53.3 MCshow
grestore
Blacktext { grestore } if
LTb
3872 80 M
Blacktext { gsave 0 setgray } if
[ [(Helvetica) 160.0 0.0 true true 0 (Density of Snake Material)]
] -53.3 MCshow
Blacktext { grestore } if
1.000 UP
1.000 UL
LTb
1.000 UP
1.000 UL
LT0
LTb
6193 4705 M
Blacktext { gsave 0 setgray } if
("repulse_perc.dat" using 2:10) Rshow
Blacktext { grestore } if
LT0
6289 4705 M
447 0 V
918 645 M
407 34 V
510 92 V
509 86 V
509 18 V
102 37 V
102 -1 V
102 -12 V
102 21 V
102 -1 V
102 -10 V
101 43 V
102 27 V
102 -43 V
102 63 V
102 139 V
102 400 V
102 319 V
101 1420 V
102 637 V
102 72 V
102 612 V
102 3 V
102 91 V
102 112 V
102 22 V
101 16 V
102 2 V
102 -5 V
102 5 V
102 0 V
102 4 V
102 0 V
101 0 V
102 0 V
102 0 V
102 0 V
102 0 V
102 0 V
102 0 V
102 0 V
101 0 V
102 0 V
102 0 V
918 645 Pls
1325 679 Pls
1835 771 Pls
2344 857 Pls
2853 875 Pls
2955 912 Pls
3057 911 Pls
3159 899 Pls
3261 920 Pls
3363 919 Pls
3465 909 Pls
3566 952 Pls
3668 979 Pls
3770 936 Pls
3872 999 Pls
3974 1138 Pls
4076 1538 Pls
4178 1857 Pls
4279 3277 Pls
4381 3914 Pls
4483 3986 Pls
4585 4598 Pls
4687 4601 Pls
4789 4692 Pls
4891 4804 Pls
4993 4826 Pls
5094 4842 Pls
5196 4844 Pls
5298 4839 Pls
5400 4844 Pls
5502 4844 Pls
5604 4848 Pls
5706 4848 Pls
5807 4848 Pls
5909 4848 Pls
6011 4848 Pls
6113 4848 Pls
6215 4848 Pls
6317 4848 Pls
6419 4848 Pls
6521 4848 Pls
6622 4848 Pls
6724 4848 Pls
6826 4848 Pls
6512 4705 Pls
1.000 UP
1.000 UL
LT1
LTb
6193 4545 M
Blacktext { gsave 0 setgray } if
("attrac_perc.dat" using 2:10) Rshow
Blacktext { grestore } if
LT1
6289 4545 M
447 0 V
918 892 M
407 36 V
510 642 V
509 1914 V
509 952 V
102 24 V
102 176 V
102 28 V
102 70 V
102 -13 V
102 -1 V
101 82 V
102 -7 V
102 -13 V
102 35 V
102 10 V
102 3 V
102 -5 V
101 1 V
102 15 V
102 0 V
102 0 V
102 0 V
102 5 V
102 0 V
102 -4 V
101 4 V
102 2 V
102 -2 V
102 -2 V
102 0 V
102 2 V
102 0 V
101 2 V
102 0 V
102 0 V
102 0 V
102 0 V
102 0 V
102 0 V
102 -4 V
101 4 V
102 0 V
102 0 V
918 892 Crs
1325 928 Crs
1835 1570 Crs
2344 3484 Crs
2853 4436 Crs
2955 4460 Crs
3057 4636 Crs
3159 4664 Crs
3261 4734 Crs
3363 4721 Crs
3465 4720 Crs
3566 4802 Crs
3668 4795 Crs
3770 4782 Crs
3872 4817 Crs
3974 4827 Crs
4076 4830 Crs
4178 4825 Crs
4279 4826 Crs
4381 4841 Crs
4483 4841 Crs
4585 4841 Crs
4687 4841 Crs
4789 4846 Crs
4891 4846 Crs
4993 4842 Crs
5094 4846 Crs
5196 4848 Crs
5298 4846 Crs
5400 4844 Crs
5502 4844 Crs
5604 4846 Crs
5706 4846 Crs
5807 4848 Crs
5909 4848 Crs
6011 4848 Crs
6113 4848 Crs
6215 4848 Crs
6317 4848 Crs
6419 4848 Crs
6521 4844 Crs
6622 4848 Crs
6724 4848 Crs
6826 4848 Crs
6512 4545 Crs
1.000 UL
LTb
816 480 M
6112 0 V
0 4368 V
-6112 0 V
816 480 L
1.000 UP
stroke
LTb
stroke
grestore
end
showpage
